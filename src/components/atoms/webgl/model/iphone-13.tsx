'use client'

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: DatSketch (https://sketchfab.com/DatSketch)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/apple-iphone-13-pro-max-4328dea00e47497dbeac73c556121bc9
Title: Apple iPhone 13 Pro Max
*/

import React, { useEffect, useState } from 'react'
import * as THREE from 'three'
import { GLTF } from 'three-stdlib'
import { Environment, useGLTF, useTexture } from '@react-three/drei'
import { ObjectMap } from '@react-three/fiber'
import { useStore } from '@/lib/store'

export type ScreenKey = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'
type ModelProps = React.ComponentProps<'group'> & {
  screen?: ScreenKey
}

THREE.Cache.enabled = true

export function Model({ screen, ...props }: ModelProps) {
  const { nodes, materials } = useGLTF('/models/iphone_13.glb') as GLTF & ObjectMap
  const storeScreenIphone = useStore((state) => state.screenIphone) as ScreenKey
  const screenIphone = screen ?? storeScreenIphone
  const textures = useTexture({
    '1': '/screen/1.png',
    '2': '/screen/2.png',
    '3': '/screen/3.png',
    '4': '/screen/4.png',
    '5': '/screen/5.png',
    '6': '/screen/6.png',
    '7': '/screen/7.png',
    '8': '/screen/8.png',
  }) as Record<ScreenKey, THREE.Texture>

  useEffect(() => {
    if (materials?.Screen_Glass) {
      materials.Screen_Glass.transparent = true
      materials.Screen_Glass.opacity = 0
      materials.Screen_Glass.depthWrite = false
    }
  }, [materials])

  useEffect(() => {
    Object.values(textures).forEach((t) => {
      t.flipY = true
      t.colorSpace = THREE.SRGBColorSpace
      t.needsUpdate = true
    })
  }, [textures])

  const [screenMaterial] = useState(
    () =>
      new THREE.MeshBasicMaterial({
        toneMapped: true,
        side: THREE.DoubleSide,
      })
  )

  useEffect(() => {
    const tex = textures[screenIphone]
    if (tex) {
      screenMaterial.map = tex
      screenMaterial.needsUpdate = true
    }
  }, [screenIphone, textures, screenMaterial])

  return (
    <group {...props} dispose={null}>
      <Environment preset='city' resolution={256} />
      <group scale={0.01}>
        <group scale={100}>
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Frame_Frame_0 as THREE.Mesh).geometry}
            material={materials.Frame}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Frame_Frame2_0 as THREE.Mesh).geometry}
            material={materials.Frame2}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Frame_Port_0 as THREE.Mesh).geometry}
            material={materials.Port}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Frame_Antenna_0 as THREE.Mesh).geometry}
            material={materials.Antenna}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Frame_Mic_0 as THREE.Mesh).geometry}
            material={materials.material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Body_Mic_0 as THREE.Mesh).geometry}
            material={materials.material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Body_Bezel_0 as THREE.Mesh).geometry}
            material={materials.Bezel}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Body_Body_0 as THREE.Mesh).geometry}
            material={materials.Body}
          />
          {/*<mesh*/}
          {/*    castShadow*/}
          {/*    receiveShadow*/}
          {/*    geometry={(nodes.Body_Wallpaper_0 as THREE.Mesh).geometry}*/}
          {/*    material={materials.Wallpaper}*/}
          {/*/>*/}
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Body_Wallpaper_0 as THREE.Mesh).geometry}
            material={screenMaterial}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Body_Camera_Glass_0 as THREE.Mesh).geometry}
            rotation={[0, Math.PI, 0]}
            material={materials.Camera_Glass}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Body_Lens_0 as THREE.Mesh).geometry}
            material={materials.Lens}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Body_Material_0 as THREE.Mesh).geometry}
            material={materials.Material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Camera_Body_0 as THREE.Mesh).geometry}
            material={materials.Body}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Camera_Glass_0 as THREE.Mesh).geometry}
            material={materials.Glass}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Camera_Camera_Frame001_0 as THREE.Mesh).geometry}
            material={materials['Camera_Frame.001']}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Camera_Mic_0 as THREE.Mesh).geometry}
            material={materials.material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Body001_Screen_Glass_0 as THREE.Mesh).geometry}
            material={materials.Screen_Glass}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Button_Frame_0 as THREE.Mesh).geometry}
            material={materials.Frame}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Circle003_Frame_0 as THREE.Mesh).geometry}
            material={materials.Frame}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Apple_Logo_Logo_0 as THREE.Mesh).geometry}
            material={materials.Logo}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Camera001_Body_0 as THREE.Mesh).geometry}
            material={materials.Body}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Camera001_Gray_Glass_0 as THREE.Mesh).geometry}
            material={materials.Gray_Glass}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Camera001_Flash_0 as THREE.Mesh).geometry}
            material={materials.Flash}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Camera001_Port_0 as THREE.Mesh).geometry}
            material={materials.Port}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Camera001_Camera_Frame_0 as THREE.Mesh).geometry}
            material={materials.Camera_Frame}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Camera001_Camera_Glass_0 as THREE.Mesh).geometry}
            material={materials.Camera_Glass}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Camera001_Lens_0 as THREE.Mesh).geometry}
            material={materials.Lens}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Camera001_Black_Glass_0 as THREE.Mesh).geometry}
            material={materials.Black_Glass}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Camera003_Material002_0 as THREE.Mesh).geometry}
            material={materials['Material.002']}
          />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/iphone_13.glb')
