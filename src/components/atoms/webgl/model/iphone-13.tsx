'use client'

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: DatSketch (https://sketchfab.com/DatSketch)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/apple-iphone-13-pro-max-4328dea00e47497dbeac73c556121bc9
Title: Apple iPhone 13 Pro Max
*/

import React, {useMemo} from 'react'
import * as THREE from 'three'
import { GLTF } from 'three-stdlib'
import {useGLTF, useTexture} from '@react-three/drei'
import { ObjectMap } from '@react-three/fiber'

type ModelProps = React.ComponentProps<'group'>

export function Model(props: ModelProps) {
    const { nodes, materials } = useGLTF('/models/iphone_13.glb') as GLTF & ObjectMap

    // Load ảnh màn hình
    const screenTexture = useTexture('/screen/1.jpg') as THREE.Texture
    screenTexture.flipY = true

    // Gán material mới cho màn hình
    const screenMaterial = useMemo(
        () =>
            new THREE.MeshBasicMaterial({
                map: screenTexture,
                toneMapped: false,
                side: THREE.DoubleSide
            }),
        [screenTexture]
    )

    return (
        <group {...props} dispose={null}>
            <group scale={0.01}>
                <group scale={100}>
                    <mesh castShadow receiveShadow geometry={(nodes.Frame_Frame_0 as THREE.Mesh).geometry} material={materials.Frame} />
                    <mesh castShadow receiveShadow geometry={(nodes.Frame_Frame2_0 as THREE.Mesh).geometry} material={materials.Frame2} />
                    <mesh castShadow receiveShadow geometry={(nodes.Frame_Port_0 as THREE.Mesh).geometry} material={materials.Port} />
                    <mesh castShadow receiveShadow geometry={(nodes.Frame_Antenna_0 as THREE.Mesh).geometry} material={materials.Antenna} />
                    <mesh castShadow receiveShadow geometry={(nodes.Frame_Mic_0 as THREE.Mesh).geometry} material={materials.material} />
                    <mesh castShadow receiveShadow geometry={(nodes.Body_Mic_0 as THREE.Mesh).geometry} material={materials.material} />
                    <mesh castShadow receiveShadow geometry={(nodes.Body_Bezel_0 as THREE.Mesh).geometry} material={materials.Bezel} />
                    <mesh castShadow receiveShadow geometry={(nodes.Body_Body_0 as THREE.Mesh).geometry} material={materials.Body} />
                    <mesh castShadow receiveShadow geometry={(nodes.Body_Wallpaper_0 as THREE.Mesh).geometry} material={screenMaterial} />
                    <mesh castShadow receiveShadow geometry={(nodes.Body_Camera_Glass_0 as THREE.Mesh).geometry} rotation={[0, Math.PI, 0]} material={materials.Camera_Glass} />
                    <mesh castShadow receiveShadow geometry={(nodes.Body_Lens_0 as THREE.Mesh).geometry} material={materials.Lens} />
                    <mesh castShadow receiveShadow geometry={(nodes.Body_Material_0 as THREE.Mesh).geometry} material={materials.Material} />
                    <mesh castShadow receiveShadow geometry={(nodes.Camera_Body_0 as THREE.Mesh).geometry} material={materials.Body} />
                    <mesh castShadow receiveShadow geometry={(nodes.Camera_Glass_0 as THREE.Mesh).geometry} material={materials.Glass} />
                    <mesh castShadow receiveShadow geometry={(nodes.Camera_Camera_Frame001_0 as THREE.Mesh).geometry} material={materials['Camera_Frame.001']} />
                    <mesh castShadow receiveShadow geometry={(nodes.Camera_Mic_0 as THREE.Mesh).geometry} material={materials.material} />
                    <mesh castShadow receiveShadow geometry={(nodes.Body001_Screen_Glass_0 as THREE.Mesh).geometry} material={materials.Screen_Glass} />
                    <mesh castShadow receiveShadow geometry={(nodes.Button_Frame_0 as THREE.Mesh).geometry} material={materials.Frame} />
                    <mesh castShadow receiveShadow geometry={(nodes.Circle003_Frame_0 as THREE.Mesh).geometry} material={materials.Frame} />
                    <mesh castShadow receiveShadow geometry={(nodes.Apple_Logo_Logo_0 as THREE.Mesh).geometry} material={materials.Logo} />
                    <mesh castShadow receiveShadow geometry={(nodes.Camera001_Body_0 as THREE.Mesh).geometry} material={materials.Body} />
                    <mesh castShadow receiveShadow geometry={(nodes.Camera001_Gray_Glass_0 as THREE.Mesh).geometry} material={materials.Gray_Glass} />
                    <mesh castShadow receiveShadow geometry={(nodes.Camera001_Flash_0 as THREE.Mesh).geometry} material={materials.Flash} />
                    <mesh castShadow receiveShadow geometry={(nodes.Camera001_Port_0 as THREE.Mesh).geometry} material={materials.Port} />
                    <mesh castShadow receiveShadow geometry={(nodes.Camera001_Camera_Frame_0 as THREE.Mesh).geometry} material={materials.Camera_Frame} />
                    <mesh castShadow receiveShadow geometry={(nodes.Camera001_Camera_Glass_0 as THREE.Mesh).geometry} material={materials.Camera_Glass} />
                    <mesh castShadow receiveShadow geometry={(nodes.Camera001_Lens_0 as THREE.Mesh).geometry} material={materials.Lens} />
                    <mesh castShadow receiveShadow geometry={(nodes.Camera001_Black_Glass_0 as THREE.Mesh).geometry} material={materials.Black_Glass} />
                    <mesh castShadow receiveShadow geometry={(nodes.Camera003_Material002_0 as THREE.Mesh).geometry} material={materials['Material.002']} />
                </group>
            </group>
        </group>
    )
}

useGLTF.preload('/models/iphone_13.glb')
